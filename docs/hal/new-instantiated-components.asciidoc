---
---

:skip-front-matter:

= Using the new Machinekit Instantiated components
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A lot of changes to the codebase have occurred recently, +
 including that the majority of HAL components (but not all) have been
converted over to instantiated components (hereafter referred to as
icomps ) +
 +
 http://static.mah.priv.at/public/HAL-instance-branch.html refers +
 +
 They are compiled with a tool called instcomp +
 +
 http://static.mah.priv.at/public/instcomp.html +
 +
 The vast majority will operate as before and will require no changes to
configs +
 +
 The sample configs have now been altered to take account of these
changes +
 ( if you find one in the repo that has not, let me know ) +
 +

********************** +
 +
 Some configs will require changes, for several reasons. +
 +
 The legacy components created variable pins and instances of themselves
internally and once done, that was it, you had had your lot. +
 Quite a few created with comp, used quite obfuscated personality
methods to achieve the variable pins and components etc +
 and this created extra parameters like *_personality_*, *_cfg_* etc +
 +
 Others were written in C and could name their parameters however they
liked, so *_num_chan_* , *wsum_sizes* and the like were used +
 +
 icomp instances are created externally, with minimal internal
functions, which principally govern variable pin numbers and name
prefixes etc. +
 There will be a preconfigured maximum number of pins set with
*maxpincount=NN* when it is compiled, this cannot be altered without +
 recompilation. +
 Then there is an default count *pincount=NN*, which will set the number
of pins and is used instead of personality, +
 but can it be varied using the newinst method below. +
 +
 The big difference with icomps is that you can call an icomp repeatedly
and create another one or several instances of it, +
 several different sizes or all the same, all at once or at several
different places in a file, or at several different points in time. +
 +
 This opens up a lot of possibilities in terms of configurations for now
and in the future. +
 +

********************** +
 +
 There are 2 ways of loading an instance of an icomp +
 +
 1) +
 +
 *loadrt \{icomp-name} count=N / names=name1,name2…..* +
 +
 This method alone will allow the majority of icomps to be loaded the
same way as legacy components. +
 eg +
 *loadrt debounce count=3* will create 3 instances of debounce;
debounce.0, debounce.1 and debounce.2, each with the default 8 filters +
 Creating 3 instances will allow 3 different delay rates, as it is a per
instance setting +
 +
 2) +
 The second more powerful method is: +
 +
 *newinst \{icomp-name} \{new-name} [pincount=N] [iprefix=] [other
args]* +
 +
 This could for instance create an instance of debounce, which has 9
filters, all set to the same rate. +
 +
 *newinst debounce mynewdebounce pincount=9 +
 setp mynewdebounce.delay 10 +
 addf mynewdebounce servo-thread* +
 +
 and you would have pins mynewdebounce.0.in to 8.in and
mynewdebounce.0.out to 8.out +
 +
 (this in itself is a great improvement because the legacy component was
limited to groups of max 8 filters +
 and the optimal mill has 3 switches on each axis, ie 9 filters
required, thus required more than one component to be loaded) +
 *NB* +
 newinst can only create ONE instance at a time +
 If all components require pin numbers different from the default, you
may have to call newinst several times. +
 eg. +
 *newinst debounce debounce.0 pincount=4 +
 newinst debounce debounce.1 pincount=3 +
 newinst debounce debounce.2 pincount=6* +
 If you just require multiple instances of a component using default pin
numbers +
 eg. +
 *loadrt debounce count=3* +
is the one to use +
 +

********************** +
 +
 The main legacy components with non-standard parameters, that have now
changed are: +
 +
 (This is not an exhaustive list) +
 +

[[_debounce]]
debounce:
+++++++++

Was *loadrt debounce cfg=size[,size,…]* +
 +
 +
 Now just load with *loadrt debounce*, for a *debounce.0* component with
the default 8 filters +
 Or several components if you need filters working at different
periods +
 eg +
 *loadrt debounce count=2 +
 setp debounce.0.delay 10 +
 setp debounce.1.delay 100* +
 will give you a total of 16 filters, 8 with 10 iteration delay and 8
with 100 iteration delay +
 +
 Or use the newinst method above to vary the number of filters in a
component +
 +

[[_pid]]
pid
+++

Was *loadrt pid [num_chan=num | names=name1[,name2…]] [debug=dbg]* +
 +
 +
 Now just *loadrt pid count=num OR names=name1……* +
 Using the newinst method you can change the name and vary the number of
channels together +
 *newinst pid pid.0 pincount=6……* +
 debug=dbg is deprecated and the debug pins are exported all the time +
 +

[[_at_pid]]
at_pid
++++++

(not yet finished - but coming soon) +
 Also *loadrt at_pid [num_chan=num | names=name1[,name2…]]* +
 same will apply +
 +

[[_weighted_sum]]
weighted_sum
++++++++++++

Was *loadrt weighted_sum wsum_sizes=size[,size,…]* +
 +
 +
 Now has a maximum of 16 in and weight pins and unlimited number of
instances (used to be 8) +
 _The pin names have changed slightly_ +
 Instead of *weighted_sum.0.bit.00.in* to say
*weighted_sum.0.bit.07.in* +
 we now have +
 *weighted_sum.0.in00* to *weighted_sum.0.in07* +
 This is partly due to restrictions in instcomp and partly to keep the
pin names as short as possible so as not +
 to fall foul of the 41 char restriction +
 +

[[_lincurve]]
lincurve
++++++++

Was *loadrt lincurve [count=N|names=name1[,name2…]]
[personality=P,P,…]* +
 +
 +
 Now has a default number of 4 fields. This number can be altered using
the newinst loading method with pincount=NN where NN is the number
required. +
 This was the use of personality previously, to set the field number for
each component instance. +
 Now we only create a single instance at a time externally, so
personality which was used internally by the component to do the
creation +
 is deprecated in all components and pincount is used as the array size
specifier which controls how many pins get created of a particular
type. +
 eg. +
 *newinst lincurve mylincurve pincount=6* will create a single instance
called mylincurve, with 6 fields for x and y +
 or +
 *loadrt lincurve count=2* will create two lincurve instances,
lincurve.0 and lincurve.1, each with the default 4 fields +
 +

[[_multiswitch]]
multiswitch
+++++++++++

Was *loadrt multiswitch [personality=P,P,…] [cfg=cfg]* +
 +
 +
 Now just *loadrt multiswitch count=NN / names = …..* for number of
components with the default 6 positions to the switch, or named
instances +
 or use newinst to vary the number of positions on the switch up to 32
and or set position numbers +
 +

[[_gantry]]
gantry
++++++

Was *loadrt gantry count=NN personality=n,n,n…* +
 Max and default number of joints is 7. +
 Now number of joints can be varied with pincount=newnumber +
 +
 +
 So for instance old call of *loadrt gantry count=1personality=2* +
 becomes +
 *newinst gantry gantry.0 pincount=2* +
 +

[[_gantry_latched]]
gantry-latched
++++++++++++++

is now called *lgantry*, because it fell foul of the 41 char pin name
limitation +
 Otherwise same applies as above +
 +

[[_bitslice]]
bitslice
++++++++

Was *loadrt bitslice [count=N|names=name1[,name2…]]
[personality=P,P,…]* +
 As previous similar examples +
 Now just *count= / names=* and the personality which set the size of
the pin arrays is taken care of by *pincount=* +
 +

*********************** +
 +
 +
 There is a man page for each component which shows the pins, parameters
and loading calls +
 This is generated for the icomps too +
 +
 +
 Alternately load from the command line with +
 +
 *$DEBUG=5 realtime restart* +
 *$halcmd loadrt \{component-name}* +
 *$halcmd show all* +
 *$halcmd unloadrt \{component-name}* +
 *$halrun -U* +
 +
 +
 to see the default pins, params, functions etc. +
 +
 +
 Hopefully the above will assist you +
 +

Last updated 2015-05-31 16:44:22 BST
