THCUD(9) HAL Component THCUD(9)

INSTANTIABLE COMPONENTS

----------------------------------------------------------------------------------------------------
   All instantiable components can be loaded in two manners


   Using loadrt with or without count= | names= parameters as per legacy components


   Using newinst, which names the instance and allows further parameters and arguments,


   primarily pincount= which can set the number of pins created for that instance (where applicable)
----------------------------------------------------------------------------------------------------

NAME

---------------------------------------------
   thcud - Torch Height Control Up/Down Input
---------------------------------------------

SYNOPSIS

--------
   thcud
--------

USAGE SYNOPSIS

-------------------------------------------------------------------------------------------
   loadrt thcud

   newinst thcud <newinstname> [ pincount=N | iprefix=prefix ] [instanceparamX=X | argX=X ]
-------------------------------------------------------------------------------------------

DESCRIPTION

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
          Torch Height Control This THC takes either an up or a down input from a THC

          If enabled and torch is on and X + Y velocity is within tolerance of set speed allow the THC to offset the Z axis as needed to maintain voltage.

          If enabled and torch is off and the Z axis is moving up remove any correction at a rate not to exceed the rate of movement of the Z axis.

          If enabled and torch is off and there is no correction pass the Z position and feed back untouched.

          If not enabled pass the Z position and feed back untouched.

          Physical  Connections  typical  paraport.0.pin-12-in  <=  THC  controller  Plasma  Up paraport.0.pin-13-in <= THC controller Plasma Down parport.0.pin-15-in  <= Plasma Torch Arc Ok Signal par‐
          port.0.pin-16-out => Plasma Torch Start Arc Contacts

          HAL Plasma Connections thc.torch-up <= paraport.0.pin-12-in thc.torch-down <= paraport.0.pin-13-in motion.spindle-on => parport.0.pin-16-out (start the arc) thc.arc-ok <=  motion.digital-in-00
          <= parport.0.pin-15-in (arc ok signal)

          HAL Motion Connections thc.requested-vel <= motion.requested-vel thc.current-vel <= motion.current-vel

          Pyvcp Connections In the xml file you need something like:

          <checkbutton>
            <text>"THC Enable"</text>
            <halpin>"thc-enable"</halpin> </checkbutton> <spinbox>
            <width>"5"</width>
            <halpin>"vel-tol"</halpin>
            <min_>.01</min_>
            <max_>1</max_>
            <resolution>0.01</resolution>
            <initval>0.2</initval>
            <format>"1.2f"</format>
            <font>("Arial",10)</font> </spinbox>

          Connect the Pyvcp pins in the postgui.hal file like this:

          net thc-enable thcud.enable <= pyvcp.thc-enable
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

FUNCTIONS

-----------------------------------------------------------------------
   thcud.N.funct
          ( OR <newinstname>.funct (requires a floating-point thread) )
-----------------------------------------------------------------------

PINS

--------------------------------------------------------------
   thcud.N.torch_up  bit in
          ( OR <newinstname>.torch_up  bit in  )


   Connect to an input pin

   thcud.N.torch_down  bit in
          ( OR <newinstname>.torch_down  bit in  )


   Connect to input pin

   thcud.N.current_vel  float in
          ( OR <newinstname>.current_vel  float in  )


   Connect to motion.current-vel

   thcud.N.requested_vel  float in
          ( OR <newinstname>.requested_vel  float in  )


   Connect to motion.requested-vel

   thcud.N.torch_on  bit in
          ( OR <newinstname>.torch_on  bit in  )


   Connect to motion.spindle-on

   thcud.N.arc_ok  bit in
          ( OR <newinstname>.arc_ok  bit in  )


   Arc Ok from Plasma Torch

   thcud.N.enable  bit in
          ( OR <newinstname>.enable  bit in  )


   Enable the THC, if not enabled Z position is passed through

   thcud.N.z_pos_in  float in
          ( OR <newinstname>.z_pos_in  float in  )


   Z Motor Position Command in from axis.n.motor-pos-cmd

   thcud.N.z_pos_out  float out
          ( OR <newinstname>.z_pos_out  float out  )


   Z Motor Position Command Out

   thcud.N.z_fb_out  float out
          ( OR <newinstname>.z_fb_out  float out  )


   Z Position Feedback to Axis

   thcud.N.cur_offset  float out
          ( OR <newinstname>.cur_offset  float out  )


   The Current Offset

   thcud.N.vel_status  bit out
          ( OR <newinstname>.vel_status  bit out  )


   When the THC thinks we are at requested speed

   thcud.N.removing_offset  bit out
          ( OR <newinstname>.removing_offset  bit out  )


   Pin for testing

   thcud.N.velocity_tol  float io
          ( OR <newinstname>.velocity_tol  float io  )


   The deviation percent from planned velocity

   thcud.N.correction_vel  float io
          ( OR <newinstname>.correction_vel  float io  )


   The Velocity to move Z to correct
--------------------------------------------------------------

AUTHOR

----------------
   John Thornton
----------------

LICENSE

-------------------
   GPLv2 or greater
-------------------

Machinekit Documentation 2015-11-01 THCUD(9)
